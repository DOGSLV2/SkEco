options:
	version: 2.1.2

#! Player Eco Functions

function skecoPlayerNew(uuid: string, p: string, m: number):
	set yaml value "Player.%{_uuid}%.Balance" in "SkEcoPlayerData" to {_m}
	set yaml value "Player.%{_uuid}%.Name" in "SkEcoPlayerData" to {_p}
	save yaml "SkEcoPlayerData"


function skecoPlayerAdd(uuid: string, m: number):
	set {_amount} to yaml value "Player.%{_uuid}%.Balance" in "SkEcoPlayerData"
	add {_m} to {_amount}
	set yaml value "Player.%{_uuid}%.Balance" in "SkEcoPlayerData" to {_amount}
	save yaml "SkEcoPlayerData"

function skecoPlayerRemove(uuid: string, m: number):
	set {_amount} to yaml value "Player.%{_uuid}%.Balance" in "SkEcoPlayerData"
	remove {_m} from {_amount}
	set yaml value "Player.%{_uuid}%.Balance" in "SkEcoPlayerData" to {_amount}
	save yaml "SkEcoPlayerData"

function skecoPlayerGet(uuid: string) :: number:
	set {_amount} to yaml value "Player.%{_uuid}%.Balance" in "SkEcoPlayerData"
	return {_amount}

function skecoPlayerSet(uuid: string, p: text, m: number):
	set yaml value "Player.%{_uuid}%.Balance" in "SkEcoPlayerData" to {_m}
	set yaml value "Player.%{_uuid}%.Name" in "SkEcoPlayerData" to {_p}
	save yaml "SkEcoPlayerData"


#! Config Functions

function skecoPlayerLoad():
	load yaml "plugins/SkEco/PlayerData.yml" as "SkEcoPlayerData"
	set yaml value "Version" in "SkEcoPlayerData" to "{@version}"
	set header of "SkEcoPlayerData" to "Player Data File" and "Not recommended to edit while server is running"
	save yaml "SkEcoPlayerData"

function skecoConfig():
	load yaml "plugins/SkEco/config.yml" as "SkEcoConfig"
	if yaml node "Version" in "SkEcoConfig" doesn't have value:
		set yaml value "Version" in "SkEcoConfig" to "{@version}"
		set comments of yaml node "Version" in "SkEcoConfig" to "DO NOT CHANGE VERSION"
	if yaml value "Version" in "SkEcoConfig" is not "{@version}":
		set yaml value "Version" in "SkEcoConfig" to "{@version}"

	if yaml node "Options.Prefix" in "SkEcoConfig" doesn't have value:
		set yaml value "Options.Prefix" in "SkEcoConfig" to "&7[&a&lECO&7]"
		set yaml value "Options.Message Color" in "SkEcoConfig" to "&6"
		set yaml value "Options.Console Messages" in "SkEcoConfig" to true
		set yaml value "Options.Permission Message" in "SkEcoConfig" to "&cYou do not have the required permssion for this command"
		add "You can change the prefix of the economy messages" to {_optionsComment::*}
		add "You can change the color of the economy messages" to {_optionsComment::*}
		add "Whether or not players get message when admin/console gives/takes money using /eco add/remove" to {_optionsComment::*}
		add "You can see the Permission message to anything you want" to {_optionsComment::*}
		set comments of yaml node "Options" in "SkEcoConfig" to {_optionsComment::*}

	if yaml node "Economy.Symbol" in "SkEcoConfig" doesn't have value:
		set yaml value "Economy.Symbol" in "SkEcoConfig" to "$"
		set yaml value "Economy.Symbol Position" in "SkEcoConfig" to "before"
		set yaml value "Economy.Currency Name" in "SkEcoConfig" to "dollar"
		set yaml value "Economy.Starting Balance" in "SkEcoConfig" to 500
		add "The symbol/name for your currency, and position (use either before or after)" to {_economyComment::*}
		add "" to {_economyComment::*}
		add "Set the amount a player will receive when they first join your server" to {_economyComment::*}
		set comments of yaml node "Economy" in "SkEcoConfig" to {_economyComment::*}

	set {SkEco::Config::Prefix} to yaml value "Options.Prefix" in "SkEcoConfig"
	set {SkEco::Config::MsgColor} to yaml value "Options.Message Color" in "SkEcoConfig"
	set {SkEco::Config::ConsoleMsg} to yaml value "Options.Console Messages" in "SkEcoConfig"
	set {SkEco::Config::PermMsg} to yaml value "Options.Permission Message" in "SkEcoConfig"

	set {SkEco::Economy::Symbol} to yaml value "Economy.Symbol" in "SkEcoConfig"
	set {SkEco::Economy::SymPosition} to yaml value "Economy.Symbol Position" in "SkEcoConfig"
	set {SkEco::Economy::CurName} to yaml value "Economy.Currency Name" in "SkEcoConfig"
	set {SkEco::Economy::StarBal} to yaml value "Economy.Starting Balance" in "SkEcoConfig" 

	set {SkEco::Verison} to yaml value "Version" in "SkEcoConfig"

	set header of "SkEcoConfig" to "SkEco - A simple economy system for Skript" and "Created by: ShaneBee"
	save yaml "SkEcoConfig"
	unload yaml "SkEcoConfig"

#! -- VERSION CHECK -- 

on load:
	skecoConfig()
	skecoPlayerLoad()
	send a "GET" request to "https://raw.githubusercontent.com/ShaneBeee/SkEco/master/version"
	set {_t} to last http response
	set {_j} to {_t}'s body
	set {_v::*} to {_j} split at "|"
	send "&7[&a&lSkEco&7] - &2Loaded successfully" to console
	set {_ver} to "%{SkEco::Verison}%"
	if {_ver} does not contain ".":
		set {_ver} to "%{_ver}%.0"
	if {_ver} is not equal to "%{_v::2}%":
		send "&7[&a&lSkEco&7] - &2Running version: %{_ver}%" to console
		send "&7[&a&lSkEco&7] - &cUpdate available, version: %{_v::2}%" to console
	else:
		send "&7[&a&lSkEco&7] - &2Running current version: %{_ver}%" to console
	if size of {eco::balance::*} > 0:
		send "&7[&a&lSkEco&7] - &6CONVERTING BALANCES OF PLAYERS FROM OLD SYSTEM TO NEW" to console
		loop {eco::balance::*}:
			set {_p} to loop-index parsed as offline player
			skecoPlayerNew(loop-index, "%{_p}%", loop-value)
			wait 1 tick
		send "&7[&a&lSkEco&7] - &aCONVERSION COMPLETE" to console
	delete {eco::*}

on join:
	wait 1 second
	if player has permission "eco.admin":
		send a "GET" request to "https://raw.githubusercontent.com/ShaneBeee/SkEco/master/version"
		set {_t} to last http response
		set {_j} to {_t}'s body
		set {_v::*} to {_j} split at "|"
		set {_ver} to "%{SkEco::Verison}%"
		if {_ver} does not contain ".":
			set {_ver} to "%{_ver}%.0"
		if {_ver} is not equal to "%{_v::2}%":
			send "&7[&a&lSkEco&7] - &2Running version: %{_ver}%" to player
			send "&7[&a&lSkEco&7] - &cUpdate available, version: %{_v::2}%" to player

on unload:
	save yaml "SkEcoPlayerData"
	unload yaml "SkEcoPlayerData"

#! -- VAULT API HOOK-- 

on vault player balance request:
	return skecoPlayerGet(uuid of event-offline player)
on vault currency decimals request:
	return 2
on vault deposit request:
	skecoPlayerAdd(uuid of event-offline player, event-number)
	return economy response with amount modified event-number, new balance skecoPlayerGet(uuid of event-offline player), response type success, and error message "none"
on vault withdraw request:
	skecoPlayerRemove(uuid of event-offline player, event-number)
	return economy response with amount modified event-number, new balance skecoPlayerGet(uuid of event-offline player), response type success, and error message "none"
on vault check player balance request:
	if skecoPlayerGet(uuid of event-offline player) is greater than event-number:
		return true
	else:
		return false
on vault enabled status request:
	return true
on vault economy name request:
	return "SkEco"
on vault format currency request:
	if "%{SkEco::Economy::SymPosition}%" is "before":
		return "%{SkEco::Economy::Symbol}%%event-number%"
	if "%{SkEco::Economy::SymPosition}%" is "after":
		return "%event-number%%{SkEco::Economy::Symbol}%"
on vault plural currency name request:
	return "%{SkEco::Economy::CurName}%s"
on vault singular currency name request:
	return "%{SkEco::Economy::CurName}%"
on player has account request:
	if skecoPlayerGet(uuid of event-offline player) is set:
		return true
	else:
		return false
on create account request:
	set {_uuid} to uuid of event-offline player
	skecoPlayerNew({_uuid}, "%event-offline player%", 0)
	return true


#! -- FUNCTIONS -- !#
function formatMoney(money: number) :: string:
	set {_money} to "%{_money}%"
	if {_money} contains ".":
		if length of {_money} - first index of "." in {_money} is 2:
			return {_money}
		return join {_money} and "0"
	else:
		return {_money}

#! First join - players account setup

on first join:
	skecoPlayerNew(uuid of player, "%player%", {SkEco::Economy::StarBal})
	send "&7[&a&lSkEco&7] - &aNew player account created for %player%" to console

#! Join update player name

on join:
	set {_name} to yaml value "Player.%uuid of player%.Name" in "SkEcoPlayerData"
	if {_name} != "%player%":
		set yaml value "Player.%uuid of player%.Name" in "SkEcoPlayerData" to "%player%"
		if yaml list "Player.%uuid of player%.Previous Names" in "SkEcoPlayerData" is not set:
			add {_name} to yaml list "Player.%uuid of player%.Previous Names" in "SkEcoPlayerData"
		if yaml list "Player.%uuid of player%.Previous Names" in "SkEcoPlayerData" does not contain {_name}:
			add {_name} to yaml list "Player.%uuid of player%.Previous Names" in "SkEcoPlayerData"
	if yaml node "Player.%uuid of player%.Balance" in "SkEcoPlayerData" doesn't have value:
		skecoPlayerNew(uuid of player, "%player%", {SkEco::Economy::StarBal})
	save yaml "SkEcoPlayerData"



#! Balance Command

command /balance [<offline player>]:
	usage: Type /bal(ance) to see your balance
	aliases: bal, money
	executable by: players and console
	trigger:
		if arg-1 is not set:
			if sender is a player:
				if player has permission "eco.bal":
					if "%{SkEco::Economy::SymPosition}%" = "before":
						send "%{SkEco::Config::Prefix}% %{SkEco::Config::MsgColor}%Balance: &a%{SkEco::Economy::Symbol}%%formatMoney(skecoPlayerGet(uuid of player))%"
					if "%{SkEco::Economy::SymPosition}%" = "after":
						send "%{SkEco::Config::Prefix}% %{SkEco::Config::MsgColor}%Balance: &a%formatMoney(skecoPlayerGet(uuid of player))%%{SkEco::Economy::Symbol}%"
				else:
					send "%{SkEco::Config::Prefix}% %{SkEco::Config::PermMsg}%"
			if sender is console:
				send "%{SkEco::Config::Prefix}% - %{SkEco::Config::MsgColor}%The console has no balance"
		if arg-1 is set:
			if sender has permission "eco.bal.other":
				if skecoPlayerGet(uuid of arg-1) is set:
					if "%{SkEco::Economy::SymPosition}%" = "before":
						send "%{SkEco::Config::Prefix}% &3%arg-1%%{SkEco::Config::MsgColor}%'s Balance: &a%{SkEco::Economy::Symbol}%%formatMoney(skecoPlayerGet(uuid of arg-1))%"
					if "%{SkEco::Economy::SymPosition}%" = "after":
						send "%{SkEco::Config::Prefix}% &3%arg-1%%{SkEco::Config::MsgColor}%'s Balance: &a%formatMoney(skecoPlayerGet(uuid of arg-1))%%{SkEco::Economy::Symbol}%"
				else:
					send "%{SkEco::Config::Prefix}% - &3%arg-1% &chas not logged into this server"
			else:
				send "%{SkEco::Config::Prefix}% %{SkEco::Config::PermMsg}%"

#! Eco admin command

command /eco [<text>] [<text>] [<number>]:
	executable by: players and console
	aliases: economy
	trigger:
		if sender has permission "eco.admin":
			if arg-1 is set:
				if arg-1 is "reset":
					if arg-2 is set:
						set {_uuid} to uuid of arg-2 parsed as offline player
						skecoPlayerSet({_uuid}, arg-2, {SkEco::Economy::StarBal}) 
						if "%{SkEco::Economy::SymPosition}%" = "before":
							send "%{SkEco::Config::Prefix}% - &3%arg-2%%{SkEco::Config::MsgColor}%'s balance has been reset to &3%{SkEco::Economy::Symbol}%%{SkEco::Economy::StarBal}%"
							if {SkEco::Config::ConsoleMsg} is true:
								send "%{SkEco::Config::Prefix}% - &3%sender% %{SkEco::Config::MsgColor}%has reset the balance of your account back to &3%{SkEco::Economy::Symbol}%%{SkEco::Economy::StarBal}%" to arg-2 parsed as player
						if "%{SkEco::Economy::SymPosition}%" = "after":
							send "%{SkEco::Config::Prefix}% - &3%arg-2%%{SkEco::Config::MsgColor}%'s balance has been reset to &3%{SkEco::Economy::StarBal}%%{SkEco::Economy::Symbol}%"
							if {SkEco::Config::ConsoleMsg} is true:
								send "%{SkEco::Config::Prefix}% - &3%sender% %{SkEco::Config::MsgColor}%has reset the balance of your account back to &3%{SkEco::Economy::StarBal}%%{SkEco::Economy::Symbol}%" to arg-2 parsed as player
					else:
						send "%{SkEco::Config::Prefix}% - %{SkEco::Config::MsgColor}%Correct Usage: &3/eco reset <player>" to sender
				if arg-1 is "set":
					if arg-2 is set:
						if arg-3 is set:
							set {_uuid} to uuid of arg-2 parsed as offline player
							skecoPlayerSet({_uuid}, arg-2, arg-3)
							if "%{SkEco::Economy::SymPosition}%" = "before":
								send "%{SkEco::Config::Prefix}% - &3%arg-2%%{SkEco::Config::MsgColor}%'s balance has been set to &3%{SkEco::Economy::Symbol}%%formatMoney(arg-3)%"
								if {SkEco::Config::ConsoleMsg} is true:
									send "%{SkEco::Config::Prefix}% - &3%sender% %{SkEco::Config::MsgColor}%has set the balance of your account to &3%{SkEco::Economy::Symbol}%%formatMoney(arg-3)%" to arg-2 parsed as player
							if "%{SkEco::Economy::SymPosition}%" = "after":
								send "%{SkEco::Config::Prefix}% - &3%arg-2%%{SkEco::Config::MsgColor}%'s balance has been set to &3%formatMoney(arg-3)%%{SkEco::Economy::Symbol}%"
								if {SkEco::Config::ConsoleMsg} is true:
									send "%{SkEco::Config::Prefix}% - &3%sender% %{SkEco::Config::MsgColor}%has set the balance of your account to &3%formatMoney(arg-3)%%{SkEco::Economy::Symbol}%" to arg-2 parsed as player
						else:
							send "%{SkEco::Config::Prefix}% - %{SkEco::Config::MsgColor}%Correct Usage: &3/eco set <player> <amount>" to sender
					else:
						send "%{SkEco::Config::Prefix}% - %{SkEco::Config::MsgColor}%Correct Usage: &3/eco set <player> <amount>" to sender
				if arg-1 is "add" or "give":
					if arg-2 is set:
						if arg-3 is set:
							set {_uuid} to uuid of arg-2 parsed as offline player
							skecoPlayerAdd({_uuid}, arg-3)
							if "%{SkEco::Economy::SymPosition}%" = "before":
								send "%{SkEco::Config::Prefix}% - %{SkEco::Config::MsgColor}%Added &3%{SkEco::Economy::Symbol}%%formatMoney(arg-3)% %{SkEco::Config::MsgColor}%to account of &3%arg-2%"
								if {SkEco::Config::ConsoleMsg} is true:
									send "%{SkEco::Config::Prefix}% - &3%sender% %{SkEco::Config::MsgColor}%added &3%{SkEco::Economy::Symbol}%%formatMoney(arg-3)% %{SkEco::Config::MsgColor}%to your account" to arg-2 parsed as player
							if "%{SkEco::Economy::SymPosition}%" = "after":
								send "%{SkEco::Config::Prefix}% - %{SkEco::Config::MsgColor}%Added &3%formatMoney(arg-3)%%{SkEco::Economy::Symbol}% %{SkEco::Config::MsgColor}%to account of &3%arg-2%"
								if {SkEco::Config::ConsoleMsg} is true:
									send "%{SkEco::Config::Prefix}% - &3%sender% %{SkEco::Config::MsgColor}%added &3%formatMoney(arg-3)%%{SkEco::Economy::Symbol}% %{SkEco::Config::MsgColor}%to your account" to arg-2 parsed as player
						else:
							send "%{SkEco::Config::Prefix}% - %{SkEco::Config::MsgColor}%Correct Usage: &3/eco add/give <player> <amount>" to sender
					else:
						send "%{SkEco::Config::Prefix}% - %{SkEco::Config::MsgColor}%Correct Usage: &3/eco add/give <player> <amount>" to sender
				if arg-1 is "remove" or "take":
					if arg-2 is set:
						if arg-3 is set:
							set {_uuid} to uuid of arg-2 parsed as offline player
							skecoPlayerRemove({_uuid}, arg-3)
							remove arg-3 from {eco::balance::%{_uuid}%}
							if "%{SkEco::Economy::SymPosition}%" = "before":
								send "%{SkEco::Config::Prefix}% - %{SkEco::Config::MsgColor}%Removed &3%{SkEco::Economy::Symbol}%%formatMoney(arg-3)% %{SkEco::Config::MsgColor}%from account of &3%arg-2%"
								if {SkEco::Config::ConsoleMsg} is true:
									send "%{SkEco::Config::Prefix}% - &3%sender% %{SkEco::Config::MsgColor}%removed &3%{SkEco::Economy::Symbol}%%formatMoney(arg-3)% %{SkEco::Config::MsgColor}%from your account" to arg-2 parsed as player
							if "%{SkEco::Economy::SymPosition}%" = "after":
								send "%{SkEco::Config::Prefix}% - %{SkEco::Config::MsgColor}%Removed &3%formatMoney(arg-3)%%{SkEco::Economy::Symbol}%%{SkEco::Config::MsgColor}%from account of &3%arg-2%"
								if {SkEco::Config::ConsoleMsg} is true:
									send "%{SkEco::Config::Prefix}% - &3%sender% %{SkEco::Config::MsgColor}%removed &3%formatMoney(arg-3)%%{SkEco::Economy::Symbol}% %{SkEco::Config::MsgColor}%from your account" to arg-2 parsed as player
						else:
							send "%{SkEco::Config::Prefix}% - %{SkEco::Config::MsgColor}%Correct Usage: &3/eco remove/take <player> <amount>" to sender
					else:
						send "%{SkEco::Config::Prefix}% - %{SkEco::Config::MsgColor}%Correct Usage: &3/eco remove/take <player> <amount>" to sender
				if arg-1 is "version" or "ver":
					send a "GET" request to "https://raw.githubusercontent.com/ShaneBeee/SkEco/master/version"
					set {_t} to last http response
					set {_j} to {_t}'s body
					set {_v::*} to {_j} split at "|"
					set {_ver} to "%{SkEco::Verison}%"
					if {_ver} does not contain ".":
						set {_ver} to "%{_ver}%.0"
					if {_ver} is not equal to "%{_v::2}%":
						send "&7[&a&lSkEco&7] - &2Running version: %{_ver}%" to player
						send "&7[&a&lSkEco&7] - &cUpdate available, version: %{_v::2}%" to sender
					else:
						send "&7[&a&lSkEco&7] - &2Running current version: %{_ver}%" to sender
					delete {eco::indexes::*}
				if arg-1 is "reload":
					send "%{SkEco::Config::Prefix}% - %{SkEco::Config::MsgColor}%Reloading config and player data"
					loop all players:
						set yaml value "Player.%uuid of loop-player%.Balance" in "SkEcoPlayerData" to {eco::balance::%uuid of loop-player%}
						save yaml "SkEcoPlayerData"
						wait 1 tick
					skecoConfig()
					send "%{SkEco::Config::Prefix}% - &aConfig and player data reloaded successfully"

			else:
				send "&7<=====>%{SkEco::Config::Prefix}%&7<=====>"
				send "&3/eco set <player> <number> &7- %{SkEco::Config::MsgColor}%Set the balance of player"
				send "&3/eco add/give <player> <amount> &7- %{SkEco::Config::MsgColor}%Add an amount to balance of player"
				send "&3/eco remove/take <player> <amount> &7- %{SkEco::Config::MsgColor}%Remove an amount from balance of player"
				send "&3/eco reset <player> &7- %{SkEco::Config::MsgColor}%Resets the players balance to the starting balace"
				send "&3/eco reload &7- %{SkEco::Config::MsgColor}%Reloads the config and player data files"
				send "&3/eco version &7- %{SkEco::Config::MsgColor}%Shows the version of SkEco you are running as well as current version available"
		else:
			send "%{SkEco::Config::Prefix}% %{SkEco::Config::PermMsg}%"


command /pay [<offline player>] [<number>]:
	executable by: players
	trigger:
		if player has permission "eco.pay":
			if arg-1 is set:
				if arg-2 is set:
					if arg-1 is not player:
						if arg-2 <= skecoPlayerGet(uuid of player):
							if arg-2 < 0:
								send "%{SkEco::Config::Prefix}% - &cYou can not send a negative amount of money"
								stop
							if skecoPlayerGet(uuid of arg-1) is not set:
								send "%{SkEco::Config::Prefix}% - &3%arg-1% &chas not played on this server before"
								stop
							skecoPlayerRemove(uuid of player, arg-2)
							skecoPlayerAdd(uuid of arg-1, arg-2)
							if "%{SkEco::Economy::SymPosition}%" = "before":
								send "%{SkEco::Config::Prefix}% - %{SkEco::Config::MsgColor}%You sent &3%{SkEco::Economy::Symbol}%%formatMoney(arg-2)% %{SkEco::Config::MsgColor}%to &3%arg-1%" to player
								send "%{SkEco::Config::Prefix}% - &3%player% %{SkEco::Config::MsgColor}%sent you &3%{SkEco::Economy::Symbol}%%formatMoney(arg-2)%" to arg-1
							if "%{SkEco::Economy::SymPosition}%" = "after":
								send "%{SkEco::Config::Prefix}% - %{SkEco::Config::MsgColor}%You sent &3%formatMoney(arg-2)%%{SkEco::Economy::Symbol}% %{SkEco::Config::MsgColor}%to &3%arg-1%" to player
								send "%{SkEco::Config::Prefix}% - &3%player% %{SkEco::Config::MsgColor}%sent you &3%formatMoney(arg-2)%@symbol}" to arg-1
						else:
							send "%{SkEco::Config::Prefix}% - &cYou do not have enough money to send"
					else:
						send "%{SkEco::Config::Prefix}% &cYou can not send money to yourself" to player
				else:
					send "%{SkEco::Config::Prefix}% &cCorrect usage /pay <player> <amount>" to player
			else:
				send "%{SkEco::Config::Prefix}% &cCorrect usage /pay <player> <amount>" to player
		else:
			send "%{SkEco::Config::Prefix}% %{SkEco::Config::PermMsg}%" to player


function formatMoney2(money: string) :: string:
	set {_money} to "%{_money}%"
	if {_money} contains ".":
		if length of {_money} - first index of "." in {_money} is 2:
			return {_money}
		return join {_money} and "0"
	else:
		return {_money}
function regex(n: object) :: text:
	if "%{_n}%" contains ".":
		set {_s::*} to split "%{_n}%" at "."
		set {_n} to "%a({_s::1})%.%last 2 characters of {_s::2}%"
		return "%{_n}%"
	else:
		set {_n} to a("%{_n}%")
		return "%{_n} ? 0%"
function a(b: text) :: text:
	if length of {_b} > 3:
		return "%a(first length of {_b} - 3 characters of {_b})%,%last 3 characters of {_b}%"
	return {_b}

#! Every 5 minutes the BalTop will reset

every 5 minute:
	delete {eco::*}

function sortHighestToLowest(indexes: strings, values: objects) :: strings:
	set {_size} to size of {_values::*}
	loop {_size} times:
		loop {_size} - 1 times:
			set {_value1} to {_values::%loop-number-2%}
			set {_value2} to {_values::%loop-number-2 + 1%}
			{_value1} is less than {_value2}
			set {_index1} to {_indexes::%loop-number-2%}
			set {_indexes::%loop-number-2%} to {_indexes::%loop-number-2 + 1%}
			set {_values::%loop-number-2%} to {_value2}
			set {_indexes::%loop-number-2 + 1%} to {_index1}
			set {_values::%loop-number-2 + 1%} to {_value1}
		remove 1 from {_size}
	set {eco::indexes::*} to {_indexes::*}
	return {eco::indexes::*}
	

function baltop(p: sender, page: Number):
	if {eco::indexes::*} is not set:
		loop yaml node list "Player" from "SkEcoPlayerData":
			set {_bal} to yaml value "%loop-value%.Balance" from "SkEcoPlayerData"
			set {_uuidlist::*} to loop-value split at "."
			set {eco::temp::balance::%{_uuidlist::2}%} to yaml value "%loop-value%.Balance" from "SkEcoPlayerData"
			set {eco::temp::player::%{_uuidlist::2}%} to "%{_uuidlist::2}%" parsed as offline player
		loop {eco::temp::balance::*}:
			set {_loop::%loop-index%} to loop-index
			set {eco::saved::balance::%loop-index%} to {eco::temp::balance::%loop-index%}
			set {_balance::%loop-index%} to {eco::temp::balance::%loop-index%}
		set {_playersSorted::*} to sortHighestToLowest({_loop::*}, {eco::temp::balance::*})
	else:
		set {_playersSorted::*} to {eco::indexes::*}
		loop {eco::temp::balance::*}:
			set {_balance::%loop-index%} to {eco::saved::balance::%loop-index%}
	set {_maxPage} to 1 if size of {_playersSorted::*} is 0 else rounded up (size of {_playersSorted::*}/10)
	if {_page} is greater than {_maxPage}:
		send "%{SkEco::Config::Prefix}% &cThat is not a valid page!" to {_p}
	else if {_page} is less than 1:
		send "%{SkEco::Config::Prefix}% &cThat is not a valid page!" to {_p}
	else:
		send "" to {_p}
		send "%{SkEco::Config::Prefix}% - &l&nTop Balances" to {_p}
		send "" to {_p}
 
		set {_calcPage} to {_page} - 1
		set {_i} to 0
		set {_pos} to 1
		loop {_playersSorted::*}:
			if {_i} is between {_calcPage} * 10 and (({_calcPage} + 1) * 10) - 1:
				set {_bal} to regex({_balance::%loop-value%})
				set {_bal2} to formatMoney2({_bal})
				send "&b##%{_i} + 1% &b%{eco::temp::player::%loop-value%}% &8&l» &f$%{_bal2}%" to {_p}
				add 1 to {_pos}
			add 1 to {_i}
		send "&7&o(( You are on page %{_page}% / %{_maxPage}% ))" to {_p}

command /baltop [<number=1>]:
	aliases: balancetop, topbal, topbalance
	trigger:
		if sender has permission "eco.baltop":        
			baltop(sender, arg-1)






