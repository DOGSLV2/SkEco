#PERMISSIONS:

#eco.bal - Player can check their own balance
#eco.bal.other - Player can check balance of another player
#eco.baltop - Player can see top balances of players
#eco.pay - Player can pay money to another player

#eco.admin - Player can set/reset/add/remove to/from balance of other players, also sees updates on login
#eco.* - Player can use ALL eco commands

#SERVER OPTIONS - CHANGE ANYTHING HERE YOU WOULD LIKE
options:
    #Set the amount a player will receive when they first join your server
    firstjoin: 500

    #The logo/name for your currency, and position (use either before or after)
    symbol: $ #some other options € ¥ 
    currencyname: dollar
    position: before #Currency symbol position, either before or after currency
    
    #You can change the prefix of the economy messages
    prefix: &7[&a&lECO&7]
    #You can change the color of the economy messages
    msgcolor: &6
    #Whether or not players get message when admin/console gives/takes money using /eco add/remove
    consolemsg: true

    #Permission message
    permmessage: &cYou do not have the required permssion for this command

    version: 1.3 #Do not change
    
#CODE - PLEASE DO NOT EDIT BELOW THIS LINE OR YOU RISK LOSING SUPPORT FOR THIS SKRIPT

# -- VERSION CHECK -- 
on load:
    send a "GET" request to "https://raw.githubusercontent.com/ShaneBeee/skripts/master/SkecoVersion"
    set {_t} to last http response
    set {_j} to {_t}'s body
    set {_v::*} to {_j} split at "|"
    send "&7[&a&lSkEco&7] - &2Loaded successfully" to console
    if "{@version}" is not equal to "%{_v::2}%":
        send "&7[&a&lSkEco&7] - &2Running version: {@version}" to console
        send "&7[&a&lSkEco&7] - &cUpdate available, version: %{_v::2}%" to console
    else:
        send "&7[&a&lSkEco&7] - &2Running current version: {@version}" to console
    delete {eco::indexes::*}
    delete {eco::saved::balance::*}

on join:
    wait 1 second
    if player has permission "eco.admin":
        send a "GET" request to "https://raw.githubusercontent.com/ShaneBeee/skripts/master/SkecoVersion"
        set {_t} to last http response
        set {_j} to {_t}'s body
        set {_v::*} to {_j} split at "|"
        if "{@version}" is not equal to "%{_v::2}%":
            send "&7[&a&lSkEco&7] - &2Running version: {@version}" to player
            send "&7[&a&lSkEco&7] - &cUpdate available, version: %{_v::2}%" to player


# -- VAULT API HOOK-- 

on vault player balance request:
    return {eco::balance::%uuid of event-offline player%}
on vault currency decimals request:
    return 2
on vault deposit request:
    add event-number to {eco::balance::%uuid of event-offline player%}
    return economy response with amount modified event-number, new balance {eco::balance::%uuid of event-offline player%}, response type success, and error message "none"
on vault withdraw request:
    remove event-number from {eco::balance::%uuid of event-offline player%}
    return economy response with amount modified event-number, new balance {eco::balance::%uuid of event-offline player%}, response type success, and error message "none"
on vault check player balance request:
    if {eco::balance::%uuid of event-offline player%} is greater than event-number:
        return true
    else:
        return false
on vault enabled status request:
    return true
on vault economy name request:
    return "SkEco"
on vault format currency request:
    if "{@position}" is "before":
        return "{@symbol}%event-number%"
    if "{@position}" is "after":
        return "%event-number%{@symbol}"
on vault plural currency name request:
    return "{@currencyname}s"
on vault singular currency name request:
    return "{@currencyname}"
on player has account request:
    if {eco::balance::%uuid of event-offline player%} is set:
        return true
    else:
        return false
on create account request:
    set {eco::balance::%uuid of event-offline player%} to 0
    set {eco::player::%uuid of event-offline player%} to event-offline player
    return true


# -- FUNCTIONS -- 
function formatMoney(money: number) :: string:
    set {_money} to "%{_money}%"
    if {_money} contains ".":
        if length of {_money} - first index of "." in {_money} is 2:
            return {_money}
        return join {_money} and "0"
    else:
        return {_money}

on first join:
    set {eco::balance::%uuid of player%} to {@firstjoin}
    set {eco::player::%uuid of player%} to player

on join:
    set {eco::player::%uuid of player%} to player

command /balance [<offline player>]:
    usage: Type /bal(ance) to see your balance
    aliases: bal, money
    executable by: players and console
    trigger:
        if arg-1 is not set:
            if sender is a player:
                if player has permission "eco.bal":
                    if "{@position}" = "before":
                        send "{@prefix} {@msgcolor}Balance: &a{@symbol}%formatMoney({eco::balance::%uuid of player%})%"
                    if "{@position}" = "after":
                        send "{@prefix} {@msgcolor}Balance: &a%formatMoney({eco::balance::%uuid of player%})%{@symbol}"
                else:
                    send "{@prefix} {@permmessage}"
            if sender is console:
                send "{@prefix} - {@msgcolor}The console has no balance"
        if arg-1 is set:
            if sender has permission "eco.bal.other":
                if {eco::balance::%uuid of arg-1%} is set:
                    if "{@position}" = "before":
                        send "{@prefix} &3%arg-1%{@msgcolor}'s Balance: &a{@symbol}%formatMoney({eco::balance::%uuid of arg-1%})%"
                    if "{@position}" = "after":
                        send "{@prefix} &3%arg-1%{@msgcolor}'s Balance: &a%formatMoney({eco::balance::%uuid of arg-1%})%{@symbol}"
                if {eco::balance::%uuid of arg-1%} is not set:
                    send "{@prefix} - &3%arg-1% &chas not logged into this server"
            else:
                send "{@prefix} {@permmessage}"

command /eco [<text>] [<text>] [<number>]:
    executable by: players and console
    aliases: economy
    trigger:
        if sender has permission "eco.admin":
            if arg-1 is set:
                if arg-1 is "reset":
                    if arg-2 is set:
                        set {_uuid} to uuid of arg-2 parsed as offline player
                        set {eco::balance::%{_uuid}%} to {@firstjoin}
                        if "{@position}" = "before":
                            send "{@prefix} - &3%arg-2%{@msgcolor}'s balance has been reset to &3{@symbol}{@firstjoin}"
                            if {@consolemsg} is true:
                                send "{@prefix} - &3%sender% {@msgcolor}has reset the balance of your account back to &3{@symbol}{@firstjoin}" to arg-2 parsed as player
                        if "{@position}" = "after":
                            send "{@prefix} - &3%arg-2%{@msgcolor}'s balance has been reset to &3{@firstjoin}{@symbol}"
                            if {@consolemsg} is true:
                                send "{@prefix} - &3%sender% {@msgcolor}has reset the balance of your account back to &3{@firstjoin}{@symbol}" to arg-2 parsed as player
                    else:
                        send "{@prefix} - {@msgcolor}Correct Usage: &3/eco reset <player>" to sender
                if arg-1 is "set":
                    if arg-2 is set:
                        if arg-3 is set:
                            set {_uuid} to uuid of arg-2 parsed as offline player
                            set {eco::balance::%{_uuid}%} to arg-3
                            if "{@position}" = "before":
                                send "{@prefix} - &3%arg-2%{@msgcolor}'s balance has been set to &3{@symbol}%formatMoney(arg-3)%"
                                if {@consolemsg} is true:
                                    send "{@prefix} - &3%sender% {@msgcolor}has set the balance of your account to &3{@symbol}%formatMoney(arg-3)%" to arg-2 parsed as player
                            if "{@position}" = "after":
                                send "{@prefix} - &3%arg-2%{@msgcolor}'s balance has been set to &3%formatMoney(arg-3)%{@symbol}"
                                if {@consolemsg} is true:
                                    send "{@prefix} - &3%sender% {@msgcolor}has set the balance of your account to &3%formatMoney(arg-3)%{@symbol}" to arg-2 parsed as player
                        else:
                            send "{@prefix} - {@msgcolor}Correct Usage: &3/eco set <player> <amount>" to sender
                    else:
                        send "{@prefix} - {@msgcolor}Correct Usage: &3/eco set <player> <amount>" to sender
                if arg-1 is "add" or "give":
                    if arg-2 is set:
                        if arg-3 is set:
                            set {_uuid} to uuid of arg-2 parsed as offline player
                            add arg-3 to {eco::balance::%{_uuid}%}
                            if "{@position}" = "before":
                                send "{@prefix} - {@msgcolor}Added &3{@symbol}%formatMoney(arg-3)% {@msgcolor}to account of &3%arg-2%"
                                if {@consolemsg} is true:
                                    send "{@prefix} - &3%sender% {@msgcolor}added &3{@symbol}%formatMoney(arg-3)% {@msgcolor}to your account" to arg-2 parsed as player
                            if "{@position}" = "after":
                                send "{@prefix} - {@msgcolor}Added &3%formatMoney(arg-3)%{@symbol} {@msgcolor}to account of &3%arg-2%"
                                if {@consolemsg} is true:
                                    send "{@prefix} - &3%sender% {@msgcolor}added &3%formatMoney(arg-3)%{@symbol} {@msgcolor}to your account" to arg-2 parsed as player
                        else:
                            send "{@prefix} - {@msgcolor}Correct Usage: &3/eco add/give <player> <amount>" to sender
                    else:
                        send "{@prefix} - {@msgcolor}Correct Usage: &3/eco add/give <player> <amount>" to sender
                if arg-1 is "remove" or "take":
                    if arg-2 is set:
                        if arg-3 is set:
                            set {_uuid} to uuid of arg-2 parsed as offline player
                            remove arg-3 from {eco::balance::%{_uuid}%}
                            if "{@position}" = "before":
                                send "{@prefix} - {@msgcolor}Removed &3{@symbol}%formatMoney(arg-3)% {@msgcolor}from account of &3%arg-2%"
                                if {@consolemsg} is true:
                                    send "{@prefix} - &3%sender% {@msgcolor}removed &3{@symbol}%formatMoney(arg-3)% {@msgcolor}from your account" to arg-2 parsed as player
                            if "{@position}" = "after":
                                send "{@prefix} - {@msgcolor}Removed &3%formatMoney(arg-3)%{@symbol}{@msgcolor}from account of &3%arg-2%"
                                if {@consolemsg} is true:
                                    send "{@prefix} - &3%sender% {@msgcolor}removed &3%formatMoney(arg-3)%{@symbol} {@msgcolor}from your account" to arg-2 parsed as player
                        else:
                            send "{@prefix} - {@msgcolor}Correct Usage: &3/eco remove/take <player> <amount>" to sender
                    else:
                        send "{@prefix} - {@msgcolor}Correct Usage: &3/eco remove/take <player> <amount>" to sender
                if arg-1 is "convert":
                    if arg-2 is set:
                        if arg-2 is "essentials":
                            execute console command "vault-convert essentialseconomy skeco"
                            send "{@prefix} &7- {@msgcolor}Conversion from Essentials to SkEco has started, check console for progress"
                        else:
                            send "{@prefix} &7- {@msgcolor}Currently only essentials is set up for conversion."
                            send "{@msgcolor}If you are using another economy plugin, use &b/vault-convert <the name of your eco plugin> skeco"
                    if arg-2 is not set:
                        send "{@prefix} &7- {@msgcolor}Correct usage: &b/eco convert <economy plugin> {@msgcolor}Currently only &bessentials {@msgcolor}is supported"
                if arg-1 is "version":
                    send a "GET" request to "https://raw.githubusercontent.com/ShaneBeee/skripts/master/SkecoVersion"
                    set {_t} to last http response
                    set {_j} to {_t}'s body
                    set {_v::*} to {_j} split at "|"
                    if "{@version}" is not equal to "%{_v::2}%":
                        send "&7[&a&lSkEco&7] - &2Running version: {@version}" to player
                        send "&7[&a&lSkEco&7] - &cUpdate available, version: %{_v::2}%" to sender
                    else:
                        send "&7[&a&lSkEco&7] - &2Running current version: {@version}" to sender
                    delete {eco::indexes::*}
            else:
                send "&7<=====>{@prefix}&7<=====>" to player
                send "&3/eco set <player> <number> &7- {@msgcolor}Set the balance of player"
                send "&3/eco add/give <player> <amount> &7- {@msgcolor}Add an amount to balance of player"
                send "&3/eco remove/take <player> <amount> &7- {@msgcolor}Remove an amount from balance of player"
                send "&3/eco reset <player> &7- {@msgcolor}Resets the players balance to the starting balace"
                send "&3/eco convert <economy plugin> &7- {@msgcolor}Converts player balances from your previous economy plugin to SkEco - Currently only &bessentials{@msgcolor} is supported"
                send "&3/eco version &7- {@msgcolor}Shows the version of SkEco you are running as well as current version available"
        else:
            send "{@prefix} {@permmessage}"


command /pay [<offline player>] [<number>]:
    executable by: players
    trigger:
        if player has permission "eco.pay":
            if arg-1 is set:
                if arg-2 is set:
                    if arg-1 is not player:
                        if arg-2 <= {eco::balance::%uuid of player%}:
                            remove arg-2 from {eco::balance::%uuid of player%}
                            add arg-2 to {eco::balance::%uuid of arg-1%}
                            if "{@position}" = "before":
                                send "{@prefix} - {@msgcolor}You sent &3{@symbol}%formatMoney(arg-2)% {@msgcolor}to &3%arg-1%" to player
                                send "{@prefix} - &3%player% {@msgcolor}sent you &3{@symbol}%formatMoney(arg-2)%" to arg-1
                            if "{@position}" = "after":
                                send "{@prefix} - {@msgcolor}You sent &3%formatMoney(arg-2)%{@symbol} {@msgcolor}to &3%arg-1%" to player
                                send "{@prefix} - &3%player% {@msgcolor}sent you &3%formatMoney(arg-2)%@symbol}" to arg-1
                        else:
                            send "{@prefix} - &cYou do not have enough money to send"
                    else:
                        send "{@prefix} &cYou can not send money to yourself" to player
                else:
                    send "{@prefix} &cCorrect usage /pay <player> <amount>" to player
            else:
                send "{@prefix} &cCorrect usage /pay <player> <amount>" to player
        else:
            send "{@prefix} {@permmessage}" to player

# -- BAL TOP & BAL TOP FUNCTIONS -- 

function formatMoney2(money: string) :: string:
    set {_money} to "%{_money}%"
    if {_money} contains ".":
        if length of {_money} - first index of "." in {_money} is 2:
            return {_money}
        return join {_money} and "0"
    else:
        return {_money}
function regex(n: object) :: text:
    if "%{_n}%" contains ".":
        set {_s::*} to split "%{_n}%" at "."
        set {_n} to "%a({_s::1})%.%last 2 characters of {_s::2}%"
        return "%{_n}%"
    else:
        set {_n} to a("%{_n}%")
        return "%{_n} ? 0%"
function a(b: text) :: text:
    if length of {_b} > 3:
        return "%a(first length of {_b} - 3 characters of {_b})%,%last 3 characters of {_b}%"
    return {_b}

function sortHighestToLowest(indexes: strings, values: objects) :: strings:
    set {_size} to size of {_values::*}
    loop {_size} times:
        loop {_size} - 1 times:
            set {_value1} to {_values::%loop-number-2%}
            set {_value2} to {_values::%loop-number-2 + 1%}
            {_value1} is less than {_value2}
            set {_index1} to {_indexes::%loop-number-2%}
            set {_indexes::%loop-number-2%} to {_indexes::%loop-number-2 + 1%}
            set {_values::%loop-number-2%} to {_value2}
            set {_indexes::%loop-number-2 + 1%} to {_index1}
            set {_values::%loop-number-2 + 1%} to {_value1}
        remove 1 from {_size}
    set {eco::indexes::*} to {_indexes::*}
    return {eco::indexes::*}
    wait 5 minute
    delete {eco::indexes::*}
    delete {eco::saved::balance::*}

function baltop(p: sender, page: Number):
    loop {eco::balance::*}:
        set {_loop::%loop-index%} to loop-index
    if {eco::indexes::*} is not set:
        loop {eco::balance::*}:
            set {eco::saved::balance::%loop-index%} to {eco::balance::%loop-index%}
            set {_balance::%loop-index%} to {eco::balance::%loop-index%}
        set {_playersSorted::*} to sortHighestToLowest({_loop::*}, {eco::balance::*})
    else:
        set {_playersSorted::*} to {eco::indexes::*}
        loop {eco::balance::*}:
            set {_balance::%loop-index%} to {eco::saved::balance::%loop-index%}
    set {_maxPage} to 1 if size of {_playersSorted::*} is 0 else rounded up (size of {_playersSorted::*}/10)
    if {_page} is greater than {_maxPage}:
        send "{@prefix} &cThat is not a valid page!" to {_p}
    else if {_page} is less than 1:
        send "{@prefix} &cThat is not a valid page!" to {_p}
    else:
        send "" to {_p}
        send "{@prefix} - &l&nTop Balances" to {_p}
        send "" to {_p}
 
        set {_calcPage} to {_page} - 1
        set {_i} to 0
        set {_pos} to 1
        loop {_playersSorted::*}:
            if {_i} is between {_calcPage} * 10 and (({_calcPage} + 1) * 10) - 1:
                set {_bal} to regex({_balance::%loop-value%})
                set {_bal2} to formatMoney2({_bal})
                send "&b##%{_pos}% &b%{eco::player::%loop-value%}% &8&l» &f$%{_bal2}%" to {_p}
                add 1 to {_pos}
            add 1 to {_i}
        send "&7&o(( You are on page %{_page}% / %{_maxPage}% ))" to {_p}

command /baltop [<number=1>]:
    aliases: balancetop, topbal, topbalance
    trigger:
        if sender has permission "eco.baltop":        
            baltop(sender, arg-1)



